#!/usr/bin/env node

var fs = require('fs');
var mkdirp = require('mkdirp');
var program = require('commander');
var sass = require('node-sass');
var package = require('../package.json');

program
  .version(package.version)
  .option('-f, --file [name]', 'file to compile')
  .option('-s, --silent', 'watches files and rebuilds on change')
  .option('-c, --compressed', 'minifies output');

program.parse(process.argv);

var inputPath = 'app/sass';
var outputPath = 'public/css';
var outputStyle = 'expanded';
var file = program.file || 'app.scss';

if (program.compressed) {
  outputStyle = 'compressed';
}

function writeCssAndMap(fullPathAndName, result, callback) {
  mkdirp(outputPath, function(err) {
    if (err) return callback(err);

    fs.writeFile(fullPathAndName, result.css, function(err) {
      if (err) return callback(err);

      fs.writeFile(fullPathAndName + '.map', result.map, callback);
    });
  });
}

function renderSassFile(filePath, callback) {
  var outputFile = outputPath + '/' + filePath.replace('.scss', '.css');

  sass.render({
    file: inputPath + '/' + filePath,
    outputStyle: outputStyle,
    outFile: outputFile,
    sourceMap: false
  }, function(err, sassResult) {
    if (err) {
      console.error('[build-sass]', err.message, 'on', err.file + ', line', err.line + ':' + err.column);
      return callback(err);
    }

    if (!program.silent) {
      console.log('render', outputFile)
    }
    writeCssAndMap(outputFile, sassResult, callback);
  });
}

renderSassFile(file, function(err) {
  if (err) return process.exit(1);

  if (!program.silent) {
    console.log('[build-sass] Finished'); 
  }
  process.exit(0);
});
