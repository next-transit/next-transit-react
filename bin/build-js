#!/usr/bin/env node

const fs = require('fs');
const program = require('commander');
const package = require('../package.json');
const webpack = require('webpack');
const resolve = require('path').resolve;
let didFail = false;

const PATHS = {
  source: './app/javascript',
  dest: './public/js'
};

program
  .version(package.version)
  .option('-w, --watch', 'watches files and rebuilds on change')
  .option('-m, --mode [mode]', 'Build mode ("development" or "production"', 'development')
  .option('-f, --force', 'Force file to rebuild in prod even if it exists');

program.parse(process.argv);

let fileName = 'app.js';

if (program.mode === 'production') {
  const versionSlug = package.version.replace(/\./g, '-');
  fileName = `app-${versionSlug}.js`;
}

if (program.mode === 'production' && !program.force && fs.existsSync(`${PATHS.dest}/${fileName}`)) {
  console.error('[build-js] Build skipped because prod app.js file already exists.');
  process.exit(0);
  return;
}

console.log('[build-js]', `Building JS assets (${program.mode})`);

webpack({
  cache: true,
  mode: program.mode,
  entry: `${PATHS.source}/index.js`,
  output: {
    path: resolve(PATHS.dest),
    filename: fileName
  },
  devtool: 'source-map',
  plugins: [],
  bail: !program.watch,
  watch: !!program.watch,
  resolve: {
    alias: {
      components: resolve(`${PATHS.source}/components`),
      lib: resolve(`${PATHS.source}/lib`)
    },
    extensions: ['.js', '.jsx']
  },
  module: {
    rules: [{
      test: /\.js$/,
      exclude: /(node_modules)/,
      use: {
        loader: 'babel-loader',
        options: {
          cacheDirectory: true,
          presets: ['@babel/preset-env']
        }
      }
    }]
  }
}, (err, stats) => {
  if (err) {
    console.error('[build-js] ', err.message);
    process.exit(1);
  } else {
    // console.log(stats);

    if (stats.compilation.warnings.length) {
      console.error('[build-js] (warning)', stats.compilation.warnings[0].message);
    }

    if (stats.compilation.errors[0]) {
      didFail = true;
      console.error('[build-js]', stats.compilation.errors[0].message);
    } else if(didFail) {
      didFail = false;
      console.log('[build-js] Build fixed');
    }
  }

  console.log('[build-js] Built in', (stats.endTime - stats.startTime) + 'ms');
});
